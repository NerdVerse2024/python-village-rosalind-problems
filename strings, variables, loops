{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7744777,"sourceType":"datasetVersion","datasetId":4527219}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rukaiyakhatoon/python-village-rosalind-problem?scriptVersionId=176659361\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-09T14:52:15.842491Z","iopub.execute_input":"2024-05-09T14:52:15.842945Z","iopub.status.idle":"2024-05-09T14:52:16.954872Z","shell.execute_reply.started":"2024-05-09T14:52:15.842911Z","shell.execute_reply":"2024-05-09T14:52:16.953817Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import this","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:16.95737Z","iopub.execute_input":"2024-05-09T14:52:16.958135Z","iopub.status.idle":"2024-05-09T14:52:16.965036Z","shell.execute_reply.started":"2024-05-09T14:52:16.958093Z","shell.execute_reply":"2024-05-09T14:52:16.964015Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n","output_type":"stream"}]},{"cell_type":"code","source":"# variables and arithmtic functions \ndef rightanglehyp(a, b): \n    return (a ** 2) + (b ** 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:16.966459Z","iopub.execute_input":"2024-05-09T14:52:16.966901Z","iopub.status.idle":"2024-05-09T14:52:16.973436Z","shell.execute_reply.started":"2024-05-09T14:52:16.966873Z","shell.execute_reply":"2024-05-09T14:52:16.972346Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"result = rightanglehyp(3, 5)\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:16.975786Z","iopub.execute_input":"2024-05-09T14:52:16.976081Z","iopub.status.idle":"2024-05-09T14:52:16.984798Z","shell.execute_reply.started":"2024-05-09T14:52:16.976056Z","shell.execute_reply":"2024-05-09T14:52:16.983695Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"34\n","output_type":"stream"}]},{"cell_type":"code","source":"result = rightanglehyp(990, 906)\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:16.986264Z","iopub.execute_input":"2024-05-09T14:52:16.986628Z","iopub.status.idle":"2024-05-09T14:52:16.995859Z","shell.execute_reply.started":"2024-05-09T14:52:16.9866Z","shell.execute_reply":"2024-05-09T14:52:16.994838Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"1800936\n","output_type":"stream"}]},{"cell_type":"code","source":"# strings and lists problem 1\nw1s = 22\nw1e = 27\nw2s = 97\nw2e = 102\nstringoftext = \"HumptyDumptysatonawallHumptyDumptyhadagreatfallAlltheKingshorsesandalltheKingsmenCouldntputHumptyDumptyinhisplaceagain.\"\nprint(f'{stringoftext[w1s:w1e + 1]} {stringoftext[w2s:w2e + 1]}')","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:16.997386Z","iopub.execute_input":"2024-05-09T14:52:16.997766Z","iopub.status.idle":"2024-05-09T14:52:17.005323Z","shell.execute_reply.started":"2024-05-09T14:52:16.997738Z","shell.execute_reply":"2024-05-09T14:52:17.00446Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Humpty Dumpty\n","output_type":"stream"}]},{"cell_type":"code","source":"# strings and lists problem 2\nw1s = 25\nw1e = 29\nw2s = 53\nw2e = 64\nstringoftext = \"UHjRaZRaA1vMbLl27BFdCHZZxArdea4ulI0lpHEuFztkJXP2cQYOoyeltoniensisrW7sPjZwRmuExeyXD1blhd284REceEulMQBxAFFMTJWqWBnl73mgt0rV2ofd9sAmsPms36jV7wLejPRO5m4gz9LbpZ1QrIzEmp.\"\nprint(f'{stringoftext[w1s:w1e + 1]} {stringoftext[w2s:w2e + 1]}')","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.006812Z","iopub.execute_input":"2024-05-09T14:52:17.007145Z","iopub.status.idle":"2024-05-09T14:52:17.018656Z","shell.execute_reply.started":"2024-05-09T14:52:17.007119Z","shell.execute_reply":"2024-05-09T14:52:17.017694Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Ardea yeltoniensis\n","output_type":"stream"}]},{"cell_type":"code","source":"# solving for conditions and loops\nstartingposition = 100 \nendposition = 200\nresult = 0\nfor x in range(startingposition, endposition + 1):\n    if x % 2 != 0:\n        result += x\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.022285Z","iopub.execute_input":"2024-05-09T14:52:17.022622Z","iopub.status.idle":"2024-05-09T14:52:17.030565Z","shell.execute_reply.started":"2024-05-09T14:52:17.022595Z","shell.execute_reply":"2024-05-09T14:52:17.02949Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"7500\n","output_type":"stream"}]},{"cell_type":"code","source":"# solving for conditions and loops\nstartingposition = 4260 \nendposition = 8734\nresult = 0\nfor x in range(startingposition, endposition + 1):\n    if x % 2 != 0:\n        result += x\n\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.031756Z","iopub.execute_input":"2024-05-09T14:52:17.032052Z","iopub.status.idle":"2024-05-09T14:52:17.042435Z","shell.execute_reply.started":"2024-05-09T14:52:17.032026Z","shell.execute_reply":"2024-05-09T14:52:17.041468Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"14533789\n","output_type":"stream"}]},{"cell_type":"code","source":"# Working with files in rosalind problem 4\n# Read the input file\nwith open(\"/kaggle/input/rosalind-files/rosalind_ini5.txt\", \"r\") as file:\n    lines = file.readlines()\n\n# Extract even-numbered lines\neven_lines = [line for i, line in enumerate(lines) if (i + 1) % 2 == 0]\n\n# Write the even-numbered lines to the output file\nwith open(\"/kaggle/working/output_file.txt\", \"w\") as output_file:\n    output_file.writelines(even_lines)\n\n# Read the output file and print its content\nwith open('/kaggle/working/output_file.txt', 'r') as output_file:\n    output_content = output_file.read()\n    print(output_content)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.045337Z","iopub.execute_input":"2024-05-09T14:52:17.045942Z","iopub.status.idle":"2024-05-09T14:52:17.059794Z","shell.execute_reply.started":"2024-05-09T14:52:17.045912Z","shell.execute_reply":"2024-05-09T14:52:17.058795Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Some things in life are bad, they can really make you mad\nOther things just make you swear and curse\nWhen you're chewing on life's gristle, don't grumble give a whistle\nThis will help things turn out for the best\nAlways look on the bright side of life\nAlways look on the right side of life\nIf life seems jolly rotten, there's something you've forgotten\nAnd that's to laugh and smile and dance and sing\nWhen you're feeling in the dumps, don't be silly, chumps\nJust purse your lips and whistle, that's the thing\nSo, always look on the bright side of death\nJust before you draw your terminal breath\nLife's a counterfeit and when you look at it\nLife's a laugh and death's the joke, it's true\nYou see, it's all a show, keep them laughing as you go\nJust remember the last laugh is on you\nAlways look on the bright side of life\nAnd always look on the right side of life\nAlways look on the bright side of life\nAnd always look on the right side of life\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# last problem, ft. Dictionary\nstringtexts = \"We tried list and we tried dicts also we tried Zen\"\ndict_word_counting = {}\nfor word in stringtexts.split(' '): \n    if word in dict_word_counting: \n        dict_word_counting[word] += 1\n    else: \n        dict_word_counting[word] = 1\nfor key, value in dict_word_counting.items():\n    print(key, value)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.06147Z","iopub.execute_input":"2024-05-09T14:52:17.062432Z","iopub.status.idle":"2024-05-09T14:52:17.069004Z","shell.execute_reply.started":"2024-05-09T14:52:17.06237Z","shell.execute_reply":"2024-05-09T14:52:17.067748Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"We 1\ntried 3\nlist 1\nand 1\nwe 2\ndicts 1\nalso 1\nZen 1\n","output_type":"stream"}]},{"cell_type":"code","source":"# last problem, ft. Dictionary in rosalind dataset\nstringtexts = \"When I find myself in times of trouble Mother Mary comes to me Speaking words of wisdom let it be And in my hour of darkness she is standing right in front of me Speaking words of wisdom let it be Let it be let it be let it be let it be Whisper words of wisdom let it be And when the broken hearted people living in the world agree There will be an answer let it be For though they may be parted there is still a chance that they will see There will be an answer let it be Let it be let it be let it be let it be There will be an answer let it be Let it be let it be let it be let it be Whisper words of wisdom let it be Let it be let it be let it be let it be Whisper words of wisdom let it be And when the night is cloudy there is still a light that shines on me Shine until tomorrow let it be I wake up to the sound of music Mother Mary comes to me Speaking words of wisdom let it be Let it be let it be let it be yeah let it be There will be an answer let it be Let it be let it be let it be yeah let it be Whisper words of wisdom let it be\"\ndict_word_counting = {}\nfor word in stringtexts.split(' '): \n    if word in dict_word_counting: \n        dict_word_counting[word] += 1\n    else: \n        dict_word_counting[word] = 1\nfor key, value in dict_word_counting.items():\n    print(key, value)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.070163Z","iopub.execute_input":"2024-05-09T14:52:17.07104Z","iopub.status.idle":"2024-05-09T14:52:17.086914Z","shell.execute_reply.started":"2024-05-09T14:52:17.071009Z","shell.execute_reply":"2024-05-09T14:52:17.08568Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"When 1\nI 2\nfind 1\nmyself 1\nin 4\ntimes 1\nof 11\ntrouble 1\nMother 2\nMary 2\ncomes 2\nto 3\nme 4\nSpeaking 3\nwords 7\nwisdom 7\nlet 30\nit 36\nbe 41\nAnd 3\nmy 1\nhour 1\ndarkness 1\nshe 1\nis 4\nstanding 1\nright 1\nfront 1\nLet 6\nWhisper 4\nwhen 2\nthe 4\nbroken 1\nhearted 1\npeople 1\nliving 1\nworld 1\nagree 1\nThere 4\nwill 5\nan 4\nanswer 4\nFor 1\nthough 1\nthey 2\nmay 1\nparted 1\nthere 2\nstill 2\na 2\nchance 1\nthat 2\nsee 1\nnight 1\ncloudy 1\nlight 1\nshines 1\non 1\nShine 1\nuntil 1\ntomorrow 1\nwake 1\nup 1\nsound 1\nmusic 1\nyeah 2\n","output_type":"stream"}]},{"cell_type":"code","source":"from collections import Counter\n#trying it by another method\nstringtexts = \"When I find myself in times of trouble Mother Mary comes to me Speaking words of wisdom let it be And in my hour of darkness she is standing right in front of me Speaking words of wisdom let it be Let it be let it be let it be let it be Whisper words of wisdom let it be And when the broken hearted people living in the world agree There will be an answer let it be For though they may be parted there is still a chance that they will see There will be an answer let it be Let it be let it be let it be let it be There will be an answer let it be Let it be let it be let it be let it be Whisper words of wisdom let it be Let it be let it be let it be let it be Whisper words of wisdom let it be And when the night is cloudy there is still a light that shines on me Shine until tomorrow let it be I wake up to the sound of music Mother Mary comes to me Speaking words of wisdom let it be Let it be let it be let it be yeah let it be There will be an answer let it be Let it be let it be let it be yeah let it be Whisper words of wisdom let it be\"\ndict_word_counting = Counter(stringtexts.split(' '))\nfor key, value in dict_word_counting.items():\n    print(key, value)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.08825Z","iopub.execute_input":"2024-05-09T14:52:17.08859Z","iopub.status.idle":"2024-05-09T14:52:17.09685Z","shell.execute_reply.started":"2024-05-09T14:52:17.08856Z","shell.execute_reply":"2024-05-09T14:52:17.096085Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"When 1\nI 2\nfind 1\nmyself 1\nin 4\ntimes 1\nof 11\ntrouble 1\nMother 2\nMary 2\ncomes 2\nto 3\nme 4\nSpeaking 3\nwords 7\nwisdom 7\nlet 30\nit 36\nbe 41\nAnd 3\nmy 1\nhour 1\ndarkness 1\nshe 1\nis 4\nstanding 1\nright 1\nfront 1\nLet 6\nWhisper 4\nwhen 2\nthe 4\nbroken 1\nhearted 1\npeople 1\nliving 1\nworld 1\nagree 1\nThere 4\nwill 5\nan 4\nanswer 4\nFor 1\nthough 1\nthey 2\nmay 1\nparted 1\nthere 2\nstill 2\na 2\nchance 1\nthat 2\nsee 1\nnight 1\ncloudy 1\nlight 1\nshines 1\non 1\nShine 1\nuntil 1\ntomorrow 1\nwake 1\nup 1\nsound 1\nmusic 1\nyeah 2\n","output_type":"stream"}]},{"cell_type":"code","source":"from collections import Counter\n#counting words from dictionary ft. Believer song by Imagine Dragons\nstringtexts = \"First things first I'ma say all the words inside my head I'm fired up and tired of the way that things have been, oh-ooh The way that things have been, oh-ooh\"\ndict_word_counting = Counter(stringtexts.split(' '))\nfor key, value in dict_word_counting.items():\n    print(key, value)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T14:52:17.097983Z","iopub.execute_input":"2024-05-09T14:52:17.098449Z","iopub.status.idle":"2024-05-09T14:52:17.112098Z","shell.execute_reply.started":"2024-05-09T14:52:17.098422Z","shell.execute_reply":"2024-05-09T14:52:17.111057Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"First 1\nthings 3\nfirst 1\nI'ma 1\nsay 1\nall 1\nthe 2\nwords 1\ninside 1\nmy 1\nhead 1\nI'm 1\nfired 1\nup 1\nand 1\ntired 1\nof 1\nway 2\nthat 2\nhave 2\nbeen, 2\noh-ooh 2\nThe 1\n","output_type":"stream"}]}]}